

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "pg_catalog";






CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."friendship_status" AS ENUM (
    'accepted',
    'pending'
);


ALTER TYPE "public"."friendship_status" OWNER TO "postgres";


CREATE TYPE "public"."notification_type" AS ENUM (
    'event',
    'friend'
);


ALTER TYPE "public"."notification_type" OWNER TO "postgres";


COMMENT ON TYPE "public"."notification_type" IS 'Type of notification message';



CREATE TYPE "public"."rsvp_status" AS ENUM (
    'pending',
    'attending',
    'declined'
);


ALTER TYPE "public"."rsvp_status" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.profile (id, avatar_url)
  values (new.id, new.raw_user_meta_data->>'avatar_url');
  return new;
end;$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."request_delete_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  DELETE FROM auth.users WHERE id = OLD.id;
  return NULL;
end$$;


ALTER FUNCTION "public"."request_delete_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."event" (
    "host" "uuid" NOT NULL,
    "date" timestamp with time zone NOT NULL,
    "start_time" timestamp with time zone NOT NULL,
    "title" character varying(50) DEFAULT 'Title'::character varying NOT NULL,
    "description" character varying(500) DEFAULT ''::character varying NOT NULL,
    "end_time" timestamp with time zone NOT NULL,
    "id" bigint NOT NULL
);


ALTER TABLE "public"."event" OWNER TO "postgres";


ALTER TABLE "public"."event" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."event_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."friendship" (
    "sending_user" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "receiving_user" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "id" bigint NOT NULL,
    "status" "public"."friendship_status" DEFAULT 'pending'::"public"."friendship_status" NOT NULL
);


ALTER TABLE "public"."friendship" OWNER TO "postgres";


ALTER TABLE "public"."friendship" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."friendship_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."notification" (
    "type" "public"."notification_type" NOT NULL,
    "target" "uuid",
    "sender" "uuid",
    "id" bigint NOT NULL,
    "event_id" bigint
);


ALTER TABLE "public"."notification" OWNER TO "postgres";


ALTER TABLE "public"."notification" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notification_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profile" (
    "id" "uuid" NOT NULL,
    "username" "text",
    "avatar_url" "text",
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."rsvp" (
    "user_id" "uuid" NOT NULL,
    "status" "public"."rsvp_status" DEFAULT 'pending'::"public"."rsvp_status" NOT NULL,
    "id" bigint NOT NULL,
    "event_id" bigint NOT NULL
);


ALTER TABLE "public"."rsvp" OWNER TO "postgres";


ALTER TABLE "public"."rsvp" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rsvp_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."event"
    ADD CONSTRAINT "event_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."event"
    ADD CONSTRAINT "event_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."friendship"
    ADD CONSTRAINT "friendship_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."notification"
    ADD CONSTRAINT "notification_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");



ALTER TABLE ONLY "public"."rsvp"
    ADD CONSTRAINT "rsvp_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."rsvp"
    ADD CONSTRAINT "unique_user_rsvp_per_event" UNIQUE ("user_id", "event_id");



CREATE OR REPLACE TRIGGER "request_delete_user" AFTER DELETE ON "public"."profile" FOR EACH ROW EXECUTE FUNCTION "public"."request_delete_user"();



ALTER TABLE ONLY "public"."notification"
    ADD CONSTRAINT "notification_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."event"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."event"
    ADD CONSTRAINT "public_event_user_id_fkey" FOREIGN KEY ("host") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."friendship"
    ADD CONSTRAINT "public_friendships_user_1_fkey" FOREIGN KEY ("sending_user") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."friendship"
    ADD CONSTRAINT "public_friendships_user_2_fkey" FOREIGN KEY ("receiving_user") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."notification"
    ADD CONSTRAINT "public_notification_sender_fkey" FOREIGN KEY ("sender") REFERENCES "public"."profile"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."notification"
    ADD CONSTRAINT "public_notification_user_fkey" FOREIGN KEY ("target") REFERENCES "public"."profile"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."rsvp"
    ADD CONSTRAINT "public_rsvp_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profile"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."rsvp"
    ADD CONSTRAINT "rsvp_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."event"("id") ON DELETE CASCADE;



CREATE POLICY "Allow hosts to view their own events" ON "public"."event" FOR SELECT TO "authenticated" USING (("host" = "auth"."uid"()));



CREATE POLICY "Allow invited users to view events" ON "public"."event" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."rsvp"
  WHERE (("rsvp"."event_id" = "event"."id") AND ("rsvp"."user_id" = "auth"."uid"())))));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."event" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "host"));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."notification" FOR DELETE TO "authenticated" USING (((( SELECT "auth"."uid"() AS "uid") = "sender") OR (( SELECT "auth"."uid"() AS "uid") = "target")));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."event" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."friendship" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."notification" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."rsvp" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for authenticated users" ON "public"."rsvp" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable users to view their own data only" ON "public"."notification" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "target"));



CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profile" FOR SELECT USING (true);



CREATE POLICY "Users can delete their own friends" ON "public"."friendship" FOR DELETE TO "authenticated" USING ((("auth"."uid"() = "sending_user") OR ("auth"."uid"() = "receiving_user")));



CREATE POLICY "Users can insert their own profile." ON "public"."profile" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can select their own friendships" ON "public"."friendship" FOR SELECT TO "authenticated" USING ((("auth"."uid"() = "sending_user") OR ("auth"."uid"() = "receiving_user")));



CREATE POLICY "Users can update own notifications" ON "public"."notification" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "target"));



CREATE POLICY "Users can update own profile." ON "public"."profile" FOR UPDATE USING (("auth"."uid"() = "id"));



CREATE POLICY "Users can update their own friendships" ON "public"."friendship" FOR UPDATE TO "authenticated" USING ((("auth"."uid"() = "sending_user") OR ("auth"."uid"() = "receiving_user")));



CREATE POLICY "Users can update their own rsvp" ON "public"."rsvp" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."event" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."friendship" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."notification" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."rsvp" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";








GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



























































































































































































































GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."request_delete_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."request_delete_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."request_delete_user"() TO "service_role";



























GRANT ALL ON TABLE "public"."event" TO "anon";
GRANT ALL ON TABLE "public"."event" TO "authenticated";
GRANT ALL ON TABLE "public"."event" TO "service_role";



GRANT ALL ON SEQUENCE "public"."event_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."event_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."event_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."friendship" TO "anon";
GRANT ALL ON TABLE "public"."friendship" TO "authenticated";
GRANT ALL ON TABLE "public"."friendship" TO "service_role";



GRANT ALL ON SEQUENCE "public"."friendship_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."friendship_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."friendship_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."notification" TO "anon";
GRANT ALL ON TABLE "public"."notification" TO "authenticated";
GRANT ALL ON TABLE "public"."notification" TO "service_role";



GRANT ALL ON SEQUENCE "public"."notification_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notification_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notification_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON TABLE "public"."rsvp" TO "anon";
GRANT ALL ON TABLE "public"."rsvp" TO "authenticated";
GRANT ALL ON TABLE "public"."rsvp" TO "service_role";



GRANT ALL ON SEQUENCE "public"."rsvp_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rsvp_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rsvp_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;

--
-- Dumped schema changes for auth and storage
--

CREATE OR REPLACE TRIGGER "on_auth_user_created" AFTER INSERT ON "auth"."users" FOR EACH ROW EXECUTE FUNCTION "public"."handle_new_user"();



