generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type TimePairs {
  id    String
  start DateTime @db.Date
  end   DateTime @db.Date
}

type AgendaItem {
  start       DateTime @db.Date
  end         DateTime @db.Date
  description String
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  Events        Event[]
  EventResponse EventResponse[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  userId        String
  description   String
  agenda        AgendaItem[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDateTime DateTime
  endDateTime   DateTime
  color         String
  EventResponse EventResponse[]
}

model EventResponse {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  eventId  String
  userId   String
  declined Boolean
  schedule TimePairs[]
  event    Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}
